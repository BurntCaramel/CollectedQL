{"version":3,"file":"piping.mjs","sources":["../funcs.js","../funcs.test.js"],"sourcesContent":["function hex(buffer) {\n  var hexCodes = [];\n  var view = new DataView(buffer);\n  for (var i = 0; i < view.byteLength; i += 4) {\n    // Using getUint32 reduces the number of iterations needed (we process 4 bytes each time)\n    var value = view.getUint32(i)\n    // toString(16) will give the hex representation of the number without padding\n    var stringValue = value.toString(16)\n    // We use concatenation and slice for padding\n    var padding = '00000000'\n    var paddedValue = (padding + stringValue).slice(-padding.length)\n    hexCodes.push(paddedValue);\n  }\n\n  // Join all the hex strings into one\n  return hexCodes.join(\"\");\n}\n\nasync function sha256String(s) {\n  var buffer = new TextEncoder(\"utf-8\").encode(s);\n  return hex(await crypto.subtle.digest(\"SHA-256\", buffer))\n}\n\nfunction jsonResponse(json) {\n  return new Response(JSON.stringify(json, null, '  '), {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  })\n}\n\nfunction makeNullary(pattern, f) {\n  if (typeof pattern === 'string') {\n    console.log('is string')\n    return (input) => input === pattern ? f : null;\n  }\n  else if (pattern instanceof RegExp) {\n    console.log('is regex')\n    return (input) => {\n      const matches = pattern.exec(input)\n      if (matches == null) {\n        return null\n      }\n\n      return () => f(...matches)\n    }\n  }\n\n  throw new Error(`Invalid pattern ${pattern}`)\n}\n\nfunction def0(defs) {\n  const concreteDefs = defs.map(([pattern, f]) => makeNullary(pattern, f));\n\n  return (input) => {\n    let f = null;\n    concreteDefs.some((check) => {\n      const foundF = check(input)\n      if (foundF) {\n        f = foundF\n        return true\n      }\n      return false\n    });\n\n    return f || (() => {\n      throw new Error(`No function found matching ${input}`)\n    });\n  }\n}\n\nexport const functions = ({ request }) => {\n  return [\n  def0([\n    ['Viewer.ipAddress', () => request.headers.get('CF-Connecting-IP')],\n    [/^\"(.*)\"$/, (_ , s) => s]\n  ]),\n  (input) => {\n    const defs = {\n      'Fetch.get': async (url) => {\n        const res = await fetch('https://' + url)\n        return res\n      },\n      'Fetch.body': async (res) => {\n        return res.body\n      },\n      'sha256': async (value) => {\n        let data;\n        if (!!value && typeof value.getReader === 'function') {\n          let chunks = []\n          const reader = value.getReader()\n          await reader.read().then(function next({ done, value }) {\n            // Result objects contain two properties:\n            // done  - true if the stream has already given you all its data.\n            // value - some data. Always undefined when done is true.\n            if (done) {\n              return;\n            }\n\n            // value for fetch streams is a Uint8Array\n            chunks.push(value);\n\n            // Read some more, and call this function again\n            return reader.read().then(next);\n          });\n          data = new Uint8Array(chunks);\n        }\n        else if (typeof value === 'string') {\n          data = new TextEncoder(\"utf-8\").encode(value);\n        }\n        else {\n          throw 'Digest must be passed valid data type'\n        }\n\n        return hex(await crypto.subtle.digest(\"SHA-256\", data))\n      }\n    }\n    return defs[input]\n  }\n]\n}","import { functions } from './funcs.js'\n\nfunction format(input) {\n  return JSON.stringify(input, null, '  ');\n}\n\nfunction eq(input, mustEqual) {\n  if (input == mustEqual) {\n    return\n  }\n\n  throw new Error(`Expected ${format(input)} to equal ${format(mustEqual)}`)\n  // throw err`Expected ${input} to equal ${mustEqual}`\n}\n\nconst to = {\n  eq: Object.assign((a, b) => a == b, { expectation: 'to equal' })\n}\n\nfunction expect(a, matcher, b) {\n  if (matcher(a, b)) {\n    return\n  }\n\n  throw new Error(`Expected ${format(a)} ${matcher.expectation} ${format(b)}`) \n}\n\nfunction it(description, body) {\n  try {\n    body();\n    console.error('✅ ', description)\n  }\n  catch (e) {\n    console.error('❌ ', description)\n    throw e;\n  }\n}\n\nconst request = {\n  headers: {\n    get(key) {\n      if (key === 'CF-Connecting-IP') {\n        return '1.2.3.4'\n      }\n    }\n  }\n};\n\nconst functionsForRequest = functions({ request });\n\nit('returns the ip address from the request', () => {\n  expect(\n    functionsForRequest[0]('Viewer.ipAddress')(),\n    to.eq,\n    '1.2.3.4'\n  )\n});\n\nit('returns a string', () => {\n  expect(\n    functionsForRequest[0]('\"hello\"')(),\n    to.eq,\n    'hello'\n  )\n});\n"],"names":["hex","buffer","hexCodes","view","DataView","i","byteLength","paddedValue","getUint32","toString","slice","length","push","join","def0","defs","concreteDefs","map","ref","pattern","f","console","log","input","RegExp","matches","exec","Error","makeNullary","some","check","foundF","format","JSON","stringify","const","to","eq","Object","assign","a","b","expectation","expect","matcher","it","description","body","error","e","functionsForRequest","request","headers","get","_","s","url","fetch","res","value","crypto","subtle","digest","data","getReader","chunks","reader","read","then","next","Uint8Array","TextEncoder","encode","functions","key"],"mappings":"AAAA,SAASA,EAAIC,WACPC,EAAW,GACXC,EAAO,IAAIC,SAASH,GACfI,EAAI,EAAGA,EAAIF,EAAKG,WAAYD,GAAK,EAAG,KAOvCE,GADU,WAJFJ,EAAKK,UAAUH,GAEHI,SAAS,KAGSC,OAD5B,WAC2CC,QACzDT,EAASU,KAAKL,UAITL,EAASW,KAAK,IAoCvB,SAASC,EAAKC,OACNC,EAAeD,EAAKE,aAAKC,UArBjC,SAAqBC,EAASC,MACL,iBAAZD,SACTE,QAAQC,IAAI,sBACJC,UAAUA,IAAUJ,EAAUC,EAAI,MAEvC,GAAID,aAAmBK,cAC1BH,QAAQC,IAAI,qBACJC,OACAE,EAAUN,EAAQO,KAAKH,UACd,MAAXE,EACK,uBAGIL,aAAE,EAAGK,WAIhB,IAAIE,yBAAyBR,GAIaS,8BAExCL,OACFH,EAAI,YACRJ,EAAaa,cAAMC,OACXC,EAASD,EAAMP,WACjBQ,IACFX,EAAIW,GACG,KAKJX,oBACC,IAAIO,oCAAoCJ,KChEpD,SAASS,EAAOT,UACPU,KAAKC,UAAUX,EAAO,KAAM,MAYrCY,IAAMC,EAAK,CACTC,GAAIC,OAAOC,gBAAQC,EAAGC,UAAMD,GAAKC,GAAG,CAAEC,YAAa,cAGrD,SAASC,EAAOH,EAAGI,EAASH,OACtBG,EAAQJ,EAAGC,SAIT,IAAId,kBAAkBK,EAAOQ,OAAMI,kBAAuBZ,EAAOS,IAGzE,SAASI,EAAGC,EAAaC,OAErBA,IACA1B,QAAQ2B,MAAM,KAAMF,GAEtB,MAAOG,SACL5B,QAAQ2B,MAAM,KAAMF,GACdG,GAIVd,IAUMe,WDuBoBhC,yBACjB,CACPJ,EAAK,CACH,CAAC,qCAA0BqC,EAAQC,QAAQC,IAAI,sBAC/C,CAAC,oBAAaC,EAAIC,UAAMA,eAEzBhC,SACc,sBACSiC,8BACAC,MAAM,WAAaD,8DAGlBE,8BACZA,EAAIX,0DAEIY,4CA4BEC,OAAOC,OAAOC,OAAO,UAAWC,SAA1C/D,OA3BH+D,kBACEJ,GAAoC,mBAApBA,EAAMK,eACtBC,EAAS,GACPC,EAASP,EAAMK,mCACfE,EAAOC,OAAOC,KAAK,SAASC,EAAKnD,qBASrC+C,EAAOrD,cAGAsD,EAAOC,OAAOC,KAAKC,sBAE5BN,EAAO,IAAIO,WAAWL,KAEnB,GAAqB,iBAAVN,OAIR,wCAHNI,EAAO,IAAIQ,YAAY,SAASC,OAAOb,2FASjCpC,KCrEYkD,CAAU,SAVtB,CACdrB,QAAS,CACPC,aAAIqB,MACU,qBAARA,QACK,eAQf7B,EAAG,qDACDF,EACEO,EAAoB,GAAG,mBAAvBA,GACAd,EAAGC,GACH,aAIJQ,EAAG,8BACDF,EACEO,EAAoB,GAAG,UAAvBA,GACAd,EAAGC,GACH"}